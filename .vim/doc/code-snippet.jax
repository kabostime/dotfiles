*code-snippet.txt*	簡潔なコード・スニペット(慣用コード断片)入力支援機構
			for Vim バージョン 7.0 以降
			by 宮川拓 <ripjohn@s28.xrea.com>
			Last Change: 2007-12-04.

code-snippet プラグイン				*code-snippet*

- インストール				|code-snippet-install|
- プラグインの概要			|code-snippet-overview|
- スニペットの登録			|code-snippet-register|
- ファイル形式別のスニペット登録	|code-snippet-filetype|
- プレースホルダの間を動き回る		|code-snippet-move|
- プレースホルダに記入する		|code-snippet-fillin|
- 設定					|code-snippet-config|
	- プラグインを無効化する		|code-snippet-disable|
	- コマンドを他のキーにマッピングする	|code-snippet-mappings|
	- 選択モードを使う			|code-snippet-selectmode|
	- プレースホルダの書式を変える		|code-snippet-format|
- 更新履歴				|code-snippet-changelog|

==============================================================================
インストール					*code-snippet-install* [[[

まず、 "%HOME\vimfiles\" (Windows) あるいは "$HOME/.vim/" (*nix) にパッケージ
のzipファイルを展開してください。次に、 "%HOME\vimfiles\doc\" あるいは
"$HOME/.vim/doc/" をカレントディレクトリにしてこの "code-snippet.jax" をVimで
開き、ヘルプファイルを登録するためにexコマンド ":helptags ." を実行してくださ
い。

また、ファイル形式別プラグインとインデントを有効にするために、|.vimrc|に以下の
一行を追加することが推奨されます。
>
	filetype plugin indent on
<
この設定は、このプラグインそのものの実行のために必須ではありませんが、ファイル
形式ごとにスニペットを用意するには必要です。また、複数行にわたるスニペットを定
義するにも便利です。|filetype|を参照してください。

多くの端末エミュレータやその他特定の環境下では、デフォルトのキーマッピングのう
ち<S-CR> と <C-CR> が機能しない可能性があります。このような場合には、
|code-snippet-mappings|を参考にしてキーマッピングを変更してください。

以上の手順は一般的なプラグインのインストール手順とほとんど同様です。詳しくは、
Vimヘルプファイルの|add-plugin|と|add-local-help|を参照してください。
]]]
==============================================================================
概要						*code-snippet-overview* [[[

このプラグインは簡潔なコード・スニペット入力支援を実現します。コード・スニペッ
トとは、ソースコードやマークアップ文書の中でよく用いられるコード断片のことで
す。まず、スニペットを登録しましょう。コマンドラインモードで次のように入力して
ください。
>
	:StringAbbrLocal fputs() "fputs([|str|], [|fp:stderr|])[||]"
<
次に挿入モードで次のように入力してください。
>
	fputs()
<
ここで<S-CR>を押すと、
>
	fputs([|str|], [|fp:stderr|])[||]
<
以上のように展開され、 "[|str|]" がヴィジュアルモードで選択されます。このよう
に "[|" と "|]" で囲まれた部分がプレースホルダです。<S-CR>を押すごとに、次のプ
レースホルダが選択されます。<C-CR>を押すと、ひとつ前のプレースホルダに飛びま
す。

<CR>を押すと、カーソルの下にあるプレースホルダが削除されて挿入モードに入り、項
目を記入できるようになります。二つめのプレースホルダ、 "[~fp:stderr~]" の上で
<CR>を押すと、初期値として "stderr" が挿入されます。他の単語を挿入するには、
<C-U>を押して削除してください(cf.|i_Ctrl-U|)。最後の空のプレースホルダ "[~~]"
は、<S-CR>で選択されるのではなく、単に削除されて挿入モードに入ります。

このヘルプファイルを読むためには、コマンドラインモードで ":help code-snippet"
と入力してください。ただしこのコマンドは、ヘルプファイルが適切にインストールさ
れていなければうまく行きません。|add-local-help|を参照してください。
]]]
==============================================================================
スニペットの登録				*code-snippet-register* [[[

Exコマンド~
						*:StringAbbrGlobal*
:StringAbbrGlobal {trigger} {snippet-expr}
		{trigger} を {snippet-expr} への短縮入力として登録します。
		{snippet-expr} は文字列として評価される式でなければなりません。
		|expr-string|を参照してください。

						*:StringAbbrLocal*
:StringAbbrLocal {trigger} {snippet-expr}
		{trigger} を {snippet-expr} へのバッファローカルな短縮入力と
		して登録します。 {snippet-expr} は文字列として評価される式でな
		ければなりません。このコマンドは主に、ファイル形式固有のスニ
		ペットを登録するために用いられます。|:abbreviate-local|を参照
		してください。

これらのコマンドは単に|:iabbrev|へのラッパに過ぎません。登録されたスニペットは
普通の短縮入力と同じように機能します。したがって、この項についての詳細はVimヘ
ルプファイルの|abbreviations|を参照してください。

次の二つのexコマンドはまったく同じ意味です。
>
	:StringAbbrLocal while() "while([~cond~]) {\n[~body~]\n}"
	:iabbr <buffer> while() while([~cond~])<Space>{<CR>[~body~]<CR>}
<
上記の例では、トリガの最後に余計な"()" がついています。これは、 "while" を文字
通り入力したいときに、展開されてしまうのを防ぐためです。末尾に余計な記号をつけ
る代わりに、 "WHILE" のように大文字の文字列をトリガとしてもいいでしょう。

"\n" は改行を意味し、 <CR> に変換されます。その他特殊文字は|:iabbrev|が扱える
よう適切に変換されます。上記の例のように、スニペットは改行文字を含むことができ
るので、複数行にわたるスニペットが可能です。たいていの場合、行頭の "\t" すなわ
ちタブ文字は必要ありません。自動字下げ機能がうまくやってくれるからです。もしも
字下げを調整したいのなら、以下の例のように、スニペット中に <C-T> や <C-D> コマ
ンドを挿入してください。
>
	:StringAbbrLocal main() "int main(void)\n{\n[~~]\nreturn 0;\<C-D>\n}"
<
この例では、 "return 0;" の行が余計にインデントされてしまうのを避けるため、行
の最後に<C-D>を挿入して調整しています。これらのコマンドについては|i_Ctrl-T|、
|i_Ctrl-D|を、特殊文字を文字列中に埋め込む方法については|expr-quote|を参照して
ください。
]]]
==============================================================================
ファイル形式別のスニペット登録			*code-snippet-filetype* [[[

特定のファイル形式のためにスニペットを登録するには、ファイル形式別プラグインを
用います。ファイル形式別プラグインとは、特定の形式のファイルが読み込まれた際に
実行されるスクリプトです。

ファイル形式別プラグインを用いるには、まず|vimrc-filetype|を参考に、ファイル形
式別プラグインを有効にしてください。Cソースファイルのためのスニペットを登録す
るためには、 "$HOME/.vim/ftplugin/" あるいは"%HOME%\vimfiles\ftplugin\"に
"c_snippet.vim" を作り、以下のように書いてください。
>
	" c_snippet.vim
	if exists(':StringAbbrLocal') != 2
	  finish
	endif
	StringAbbrLocal while() "while([~cond~]) {\n[~body~]\n}"
	StringAbbrLocal fgets() "fgets([~buf~], [~size~], [~fp:stdin~])[~~]"
	" ...
<
ファイル名のうちアンダーラインの前、 "c" の部分はファイル形式の名前です。アン
ダーラインの後、 "snippet" の部分はなんでも構いませんので、他のプラグインと名
前が衝突する場合には、適宜変えてください。

詳しくは、|add-plugin|、|filetype-plugin|などの記事を参照してください。
]]]
==============================================================================
プレースホルダの間を動き回る			*code-snippet-move* [[[

コマンド~

<S-CR>	[モード: niv]
		次のプレースホルダに飛びます。

<C-CR>	[モード: niv]
		ひとつ前のプレースホルダに飛びます。

挿入モードでのこれらのコマンドは、まず、そこで入力されたトリガによってスニペッ
トを展開しようと試みます。といっても具体的には、 <Esc> を押したように働くだけ
です。言い換えれば、スニペットを展開するために、普通の短縮入力と同様に <Esc>
や <C-]> を押しても構いません。

ついで各モード共通に、次/ひとつ前のプレースホルダがヴィジュアルモードで選択さ
れます。現在位置の下/上にプレースホルダがなければ、バッファの最初/最後のプレー
スホルダに飛びます。プレースホルダが空であったり、 "[~  ~]" のように空白だけを
挟んでいるのなら、単に削除されて挿入モードに入ります。

挿入モードでの <S-CR> は、現在位置ではなく挿入開始位置からプレースホルダを検索
します。これは、展開されたスニペットの後ろにあるプレースホルダでなく、スニペッ
トの最初にあるプレースホルダを選択するようにするためです。
]]]
==============================================================================
プレースホルダに記入する			*code-snippet-fillin* [[[

マッピング~

<CR>	[モード: v]
		選択されたプレースホルダを削除し、挿入モードに入ります。プレー
		スホルダの中に ":" 文字があれば、それ以降がデフォルト文字列と
		して挿入されます。
]]]
==============================================================================
設定						*code-snippet-config* [[[

------------------------------------------------------------------------------
プラグインを無効化する				*code-snippet-disable* [[[~

プラグインを無効化するためには、以下のように*g:CodeSnippet_disabled* を非0に設定
してください。
>
	let g:CodeSnippet_disabled = 1
< ]]]
------------------------------------------------------------------------------
コマンドを他のキーにマップする			*code-snippet-mappings* [[[~

以下のコマンドは、実際には内部的なマッピングへとマップされています。

	<S-CR>		*<Plug>CodeSnippet_forward*
	<C-CR>		*<Plug>CodeSnippet_backward*
	<CR>		*<Plug>CodeSnippet_fillin*

"forward" 、 "backward" はノーマル、挿入、ヴィジュアルの各モードの時にだけ機能
し、コマンドモードでは何もしません。同様に "fillin" はヴィジュアルモードの時に
だけ機能します。

コマンドを他のキーに関連付けるには、これらの内部的なマッピングを用います。たと
えば、移動コマンドを<C-J>、<C-K>に関連付けるには、以下のようにしてください。
>
	map <C-J> <Plug>CodeSnippet_forward
	imap <C-J> <Plug>CodeSnippet_forward
	map <C-K> <Plug>CodeSnippet_backward
	imap <C-K> <Plug>CodeSnippet_backward
<
記入コマンドを空白文字に関連付けるには、以下のようにしてください。
>
	vmap <Space> <Plug>CodeSnippet_fillin
<
デフォルトのマッピングを無効化するには、以下のように
*g:CodeSnippet_no_default_mappings* を非0に設定してください。
>
	let g:CodeSnippet_no_default_mappings = 1
<]]]
------------------------------------------------------------------------------
選択モードを使う				*code-snippet-selectmode* [[[~

移動コマンドがプレースホルダを選択する際に、ヴィジュアルモードではなく選択モー
ドを使うよう設定することができます。グローバル変数*g:CodeSnippet_use_selectmode*
あるいはバッファローカル変数*b:CodeSnippet_use_selectmode* を非0に設定してくださ
い。両方設定されている場合には、バッファローカル変数の値が優先されます。

選択モードについては|select-mode|を参照してください。作者はこのモードが好きで
はありません。ヴィジュアルモードのぶかっこうな焼き直しとしか思えないからです。
いずれにせよ、このプラグインのすべてのコマンドは、選択モードでもヴィジュアル
モードと同様に機能します。
 ]]]
------------------------------------------------------------------------------
プレースホルダの書式を変える			*code-snippet-format* [[[~

プレースホルダとは、 "opener" と "closer" に挟まれた文字列です。もしプレースホ
ルダに "defind" が含まれていれば、それ以降が初期値の文字列とみなされます。初期
設定は以下の通りです。

	opener	"[~"
	closer	"~]"
	defind	":"

プレースホルダの書式を変えるためには、以下の変数を設定してください。

		 バッファローカル変数	 グローバル変数
	opener	*b:CodeSnippet_opener*	*g:CodeSnippet_opener*
	closer	*b:CodeSnippet_closer*	*g:CodeSnippet_closer*
	defind	*b:CodeSnippet_defind*	*g:CodeSnippet_defind*

バッファローカル変数はグローバル変数よりも優先されます。また、これらの変数は空
文字列であってはなりませんし、空白、タブ文字、改行を含んでもなりません。

以下のファイル形式別プラグインの例では、TeXファイルでのプレースホルダの書式を
"<+ ... +>" に設定し、いくつかのテンプレートを登録しています。
>
	" tex_template.vim
	if exists(':StringAbbrLocal') != 2
	  finish
	endif
	let b:CodeSnippet_opener = '<+'
	let b:CodeSnippet_closer = '+>'
	StringAbbrLocal chap@ "\\chapter{<+chap+>} % {{{\n\n"
		\ . "<++>\n\n"
		\ . "% }}}"
	StringAbbrLocal sect@ "\\section{<+heading+>} % {{{\n\n"
		\ . "<++>\n\n"
		\ . "% }}}"
<
コメントの中の "{{{" と "}}}" は、|'foldmethod'|の値が "marker" の時に、折り畳
みを示すための記号です。
]]]
------------------------------------------------------------------------------
]]]
==============================================================================
更新履歴					*code-snippet-changelog* [[[

2007-12-04
	- ヘルプファイルの間違いを修正: プレースホルダの書式についての記述が
	  "(_ ... _)" のままになってた。
	- プレースホルダの書式を"[| ... |]" から"[~ ... ~]"に再び変更(ごめんな
	  さい！)。"[| ... |]" はヘルプファイルでおかしなことになるので。

2007-12-03
	- :StringAbbr... で "|" が <Bar> にエスケープされないバグをつぶした。
	- デフォルトのプレースホルダの書式を "(_ ... _)" から "[| ... |]" に変
	  えた。

2007-12-02
	- 名前を "template plugin" から "code-snippet" に変えた。
	- プレフィクスを "Template_" から "CodeSnippet_" に変えた。
	- <CR> の内部マッピングを "replace" から "fillin" に変えた。
	- デフォルトのプレースホルダの書式を "<+ ... +>" から "(_ ... _)" に変
	  えた。
	- "(_foo_)(__)" のように、連なったプレースホルダをうまく処理できないバ
	  グをつぶした。
	- 複数行にわたるプレースホルダを禁止した。

2007-12-01
	- 不要な箇所を削った。

2007-11-29
	- 挿入モードでの <S-CR> は挿入開始位置から検索を開始するようにした。
	- プレースホルダは複数行にまたがっても構わない。
	- バージョン 7.0 以降だけをサポートする。

2007-11-28
	- <S-CR> と <C-CR> でテンプレートを展開するようにした。
	- 選択モードを使うよう設定できるようにした。
	- プレフィクスを "TemplatePlugin_" から "Template_" に変えた。

2007-11-26
	- 内部マッピングを、不要なモードでは<Nop>にマップするようにした。

2007-11-24
	- 初期バージョン。
]]]
==============================================================================
 vim: set ts=8 sw=8 noet tw=78 ft=help fdm=marker fmr=[[[,]]] :
